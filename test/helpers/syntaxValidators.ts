import { MainPage } from "../pageobjects/main.page";
import SyntaxElements from "../pageobjects/syntax";

export class SyntaxValidators extends MainPage{
    
    async bulletItemValidators(elemId:number, syntaxPostsToCheck: Array<{ id: number, text: string, [key: string]: any }>){
        const mainPage = new MainPage();
        const expectedPost = syntaxPostsToCheck.find((elem:any) => elem.id === elemId); // {"id": 6, "text": "- Item 1 with '-'", ...
        const expectedText = expectedPost?.text  // "- Item 1 with '-'"
        const cleanExpectedText = expectedText?.replace(/^[\+\*\-\s]+/, '');
        if (!cleanExpectedText) throw new Error("expectedText is undefined ‚Äî –ø—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–µ");
        console.log("üéØ Expected:", cleanExpectedText);
      
        let foundPost;
      
        for (const post of await mainPage.allPostsOnPage) {
            const text = await (await post.$(".relative.w-full.max-w-full")).getText();
            console.log("üîç Received:", text);
          
            if (text.includes(cleanExpectedText)) {
              foundPost = post;
              break;
            }
          }
        console.log(foundPost)
        // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –ø–æ—Å—Ç —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–π–¥–µ–Ω
        expect(foundPost).toBeDefined();
        if (!foundPost) throw new Error("Post not found");
      
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –ø–æ—Å—Ç–∞ –µ—Å—Ç—å ul —Å–æ —Å—Ç–∏–ª–µ–º list-style-type: disc
        const ul = await foundPost.$("ul");
        expect(await ul.isExisting()).toBe(true);
      
        const listStyle = await ul.getCSSProperty("list-style-type");
        expect(listStyle.value).toBe("disc");
      
        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤ ul –µ—Å—Ç—å span —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        const span = await ul.$("span");
        expect(await span.isExisting()).toBe(true);
        expect(await span.getText()).toBe(cleanExpectedText);
    }

    async emphasisValidators(
        elemID: number,
        syntaxPostsToCheck: Array<{ id: number, text: string, [key: string]: any }>,
        tag: string,
        type: string
      ) {
        const syntaxElements = new SyntaxElements();
        const postData = syntaxPostsToCheck.find(p => Number(p.id) === elemID);
        
        if (!postData) throw new Error("postData was undefined");
        
        const { validation } = postData!;
        const expectedText = postData.text;
        const cleanedExpectedText = expectedText?.replace(/[\*~]/g, '');
      
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–∫—Å—Ç–∞
        const validatePost = async (elementSelector: any, cssProperty: string, expectedValue: string) => {
          await elementSelector.waitForDisplayed();
          const paragraph = await elementSelector;
          const child = await paragraph.$('./*'); // –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ ‚Äî <em>, <b>, <s> –∏ —Ç.–¥.)
          expect(await child.getTagName()).toBe(tag);
          expect(await child.getText()).toBe(cleanedExpectedText);
          console.log(`${cssProperty}::`, await child.getCSSProperty(cssProperty)); // –õ–æ–≥–∏—Ä—É–µ–º CSS-—Å–≤–æ–π—Å—Ç–≤–æ
          expect(await child.getCSSProperty(cssProperty)).toEqual(expectedValue);
        };
      
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏ CSS-—Å–≤–æ–π—Å—Ç–≤–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch (type) {
          case "Italic":
            await validatePost(syntaxElements.italicPost, "font-style", validation.property);
            break;
          case "Bold":
            await validatePost(syntaxElements.boldPost, "font-weight", validation.property);
            break;
          case "Strikethrough":
            await validatePost(syntaxElements.strikethroughPost, "text-decoration", validation.property);
            break;
          default:
            throw new Error("Syntax mistake");
        }
      }
      
      






}